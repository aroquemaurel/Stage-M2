package com.continental.gt.generation.test.stim;

import java.util.List;

import com.continental.gt.test.stim.StimScenario;

import com.continental.gt.devices.Device;
import com.continental.gt.exception.CheckFailedGreenTTexception;
	
import com.continental.gt.devices.Hil;
import com.continental.gt.test.alias.AliasHilParam;
import com.continental.gt.test.alias.AliasReadable;

import org.apache.thrift.TException;	

/**
 * Test of stubbed class generated
 * Generated by GreenT
 */
public class StimScenario_Stub_1 extends StimScenario {
	
	public StimScenario_Stub_1(){
		super("Anonymous StimScenario_Stub_1");
	}

	public StimScenario_Stub_1(String name) {
		super(name);
	}
	
	@Override
	public void addAllRequiredAlias() {
		addAliasWritable(Hil.class, new AliasHilParam("HIL_VS"));
		addAliasReadable(Hil.class, new AliasReadable("HIL_VS_OUT"));
		addAliasWritable(Hil.class, new AliasHilParam("HIL_VS"));
		addAliasReadable(Hil.class, new AliasReadable("HIL_VS_OUT"));
		addAliasWritable(Hil.class, new AliasHilParam("HIL_VS"));
		addAliasReadable(Hil.class, new AliasReadable("HIL_VS_OUT"));
		addAliasWritable(Hil.class, new AliasHilParam("HIL_KEY"));
		addAliasWritable(Hil.class, new AliasHilParam("HIL_VB"));
	}
	/* 
	 * @see com.continental.gt.test.stim.StimScenario#exec()
	 * Generated by GreenT.
	 */
	@Override
	public void exec(List<Device> devices) throws CheckFailedGreenTTexception {
		showMsg(".exec() : executing stimulation code of StimScenario_Stub_1 class...");
		try {
			double n;
			Thread.sleep(500); // TODO remove me
			Hil hil = (Hil)getDeviceByClass(devices, Hil.class);
			Dbg dbg = (Dbg)getDeviceByClass(devices, Dbg.class);
			
			((AliasHilParam)(getAliasWritable(Hil.class, "HIL_VS"))).setPhy(0, hil);
			
			n = getAliasReadable(Hil.class,"HIL_VS_OUT").getValue(hil);
			if(!(n >= -0.2 && n <= 0.2)) {
				throw new CheckFailedGreenTTexception("CHECK(HIL_VS_OUT,0.0,TOLRES(1.0))");
			};
			((AliasHilParam)(getAliasWritable(Hil.class, "HIL_VS"))).setPhy(0, hil);
			
			n = getAliasReadable(Hil.class,"HIL_VS_OUT").getValue(hil);
			if(!(n >= 49.5 && n <= 50.5)) {
				throw new CheckFailedGreenTTexception("CHECK(HIL_VS_OUT,50.0,TOLPER(1.0))");
			};
			((AliasHilParam)(getAliasWritable(Hil.class, "HIL_VS"))).setPhy(0, hil);
			
			n = getAliasReadable(Hil.class,"HIL_VS_OUT").getValue(hil);
			if(!(n >= -0.2 && n <= 0.2)) {
				throw new CheckFailedGreenTTexception("CHECK(HIL_VS_OUT,0.0,TOLRES(1.0))");
			};
			dbg.stop();
			((AliasHilParam)(getAliasWritable(Hil.class, "HIL_KEY"))).setPhy(0, hil);
			((AliasHilParam)(getAliasWritable(Hil.class, "HIL_VB"))).setPhy(0, hil);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (TException e) {
			e.printStackTrace();
		}		
		
		showMsg("... complete ok!");
	}

}
