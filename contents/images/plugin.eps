%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 755 178
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Sunday, August 9, 2015 11:23:49 PM CEST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
755 178 setpagesize
0 0 0 0 setmargins
0 0 setorigin
755 178 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
755.000 0.00000 l
755.000 178.000 l
0.00000 178.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
755.000 0.00000 l
755.000 178.000 l
0.00000 178.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 755 178 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -226.000 -151.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
226.000 151.000 m
981.000 151.000 l
981.000 329.000 l
226.000 329.000 l
226.000 151.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -226.000 -151.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -226.000 -151.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -226.000 -151.000 ] defaultmatrix matrix concatmatrix setmatrix
q
<< /PatternType 2
   /Shading
   << /ShadingType 2
      /ColorSpace /DeviceRGB
      /Coords [226.99197387695312 151.02085876464844 540.7205200195312 328.0823974609375]
      /Function
      << /FunctionType 2
         /Domain [0 1]
         /Range [0 1 0 1 0 1]
         /C0 [0.9098039 0.93333334 0.96862745]
         /C1 [1.0 0.6 0.0]
         /N 1
      >>
      /Extend [true true]
   >>
>>
matrix makepattern setpattern
newpath
226.992 151.021 m
496.455 151.021 l
540.721 239.552 l
496.455 328.082 l
226.992 328.082 l
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
226.992 151.021 m
496.455 151.021 l
540.721 239.552 l
496.455 328.082 l
226.992 328.082 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
288.315 231.897 m
290.284 231.897 l
290.284 244.819 l
297.378 244.819 l
297.378 246.475 l
288.315 246.475 l
288.315 231.897 l
h
303.614 236.804 m
302.645 236.804 301.882 237.179 301.325 237.929  c
300.768 238.679 300.489 239.710 300.489 241.022  c
300.489 242.324 300.768 243.353 301.325 244.108  c
301.882 244.863 302.645 245.241 303.614 245.241  c
304.572 245.241 305.330 244.863 305.888 244.108  c
306.445 243.353 306.723 242.324 306.723 241.022  c
306.723 239.720 306.445 238.692 305.888 237.936  c
305.330 237.181 304.572 236.804 303.614 236.804  c
h
303.614 235.272 m
305.177 235.272 306.403 235.780 307.294 236.796  c
308.184 237.811 308.630 239.220 308.630 241.022  c
308.630 242.804 308.184 244.205 307.294 245.225  c
306.403 246.246 305.177 246.757 303.614 246.757  c
302.041 246.757 300.812 246.246 299.927 245.225  c
299.041 244.205 298.598 242.804 298.598 241.022  c
298.598 239.220 299.041 237.811 299.927 236.796  c
300.812 235.780 302.041 235.272 303.614 235.272  c
h
318.804 240.882 m
318.804 239.580 318.535 238.569 317.999 237.850  c
317.462 237.132 316.710 236.772 315.741 236.772  c
314.783 236.772 314.033 237.132 313.491 237.850  c
312.949 238.569 312.679 239.580 312.679 240.882  c
312.679 242.173 312.949 243.179 313.491 243.897  c
314.033 244.616 314.783 244.975 315.741 244.975  c
316.710 244.975 317.462 244.616 317.999 243.897  c
318.535 243.179 318.804 242.173 318.804 240.882  c
h
320.600 245.116 m
320.600 246.981 320.189 248.366 319.366 249.272  c
318.543 250.179 317.277 250.632 315.569 250.632  c
314.934 250.632 314.337 250.585 313.780 250.491  c
313.223 250.397 312.679 250.252 312.147 250.054  c
312.147 248.319 l
312.679 248.600 313.199 248.809 313.710 248.944  c
314.220 249.080 314.746 249.147 315.288 249.147  c
316.465 249.147 317.345 248.840 317.929 248.225  c
318.512 247.611 318.804 246.684 318.804 245.444  c
318.804 244.554 l
318.439 245.199 317.965 245.681 317.382 245.999  c
316.798 246.317 316.106 246.475 315.304 246.475  c
313.960 246.475 312.879 245.965 312.061 244.944  c
311.244 243.923 310.835 242.569 310.835 240.882  c
310.835 239.184 311.244 237.824 312.061 236.804  c
312.879 235.783 313.960 235.272 315.304 235.272  c
316.106 235.272 316.798 235.431 317.382 235.749  c
317.965 236.067 318.439 236.548 318.804 237.194  c
318.804 235.538 l
320.600 235.538 l
320.600 245.116 l
h
324.311 235.538 m
326.108 235.538 l
326.108 246.475 l
324.311 246.475 l
324.311 235.538 l
h
324.311 231.272 m
326.108 231.272 l
326.108 233.554 l
324.311 233.554 l
324.311 231.272 l
h
337.727 235.960 m
337.727 237.632 l
337.227 237.350 336.722 237.142 336.212 237.007  c
335.701 236.871 335.186 236.804 334.665 236.804  c
333.498 236.804 332.592 237.171 331.946 237.905  c
331.300 238.640 330.977 239.679 330.977 241.022  c
330.977 242.356 331.300 243.392 331.946 244.132  c
332.592 244.871 333.498 245.241 334.665 245.241  c
335.186 245.241 335.701 245.171 336.212 245.030  c
336.722 244.890 337.227 244.679 337.727 244.397  c
337.727 246.054 l
337.227 246.293 336.709 246.470 336.173 246.585  c
335.636 246.699 335.066 246.757 334.462 246.757  c
332.816 246.757 331.509 246.238 330.540 245.202  c
329.571 244.166 329.087 242.772 329.087 241.022  c
329.087 239.231 329.576 237.824 330.555 236.804  c
331.535 235.783 332.878 235.272 334.587 235.272  c
335.139 235.272 335.678 235.330 336.204 235.444  c
336.730 235.559 337.238 235.731 337.727 235.960  c
h
340.864 235.538 m
342.661 235.538 l
342.661 246.475 l
340.864 246.475 l
340.864 235.538 l
h
340.864 231.272 m
342.661 231.272 l
342.661 233.554 l
340.864 233.554 l
340.864 231.272 l
h
355.764 240.554 m
355.764 241.429 l
347.514 241.429 l
347.587 242.668 347.957 243.613 348.624 244.265  c
349.291 244.916 350.223 245.241 351.421 245.241  c
352.108 245.241 352.775 245.155 353.421 244.983  c
354.067 244.811 354.712 244.559 355.358 244.225  c
355.358 245.913 l
354.712 246.194 354.051 246.405 353.374 246.546  c
352.697 246.686 352.009 246.757 351.311 246.757  c
349.561 246.757 348.179 246.249 347.163 245.233  c
346.147 244.218 345.639 242.845 345.639 241.116  c
345.639 239.324 346.121 237.903 347.085 236.850  c
348.048 235.798 349.353 235.272 350.999 235.272  c
352.468 235.272 353.629 235.746 354.483 236.694  c
355.337 237.642 355.764 238.929 355.764 240.554  c
h
353.968 240.022 m
353.957 239.043 353.684 238.262 353.147 237.679  c
352.611 237.095 351.900 236.804 351.014 236.804  c
350.014 236.804 349.212 237.085 348.608 237.647  c
348.004 238.210 347.655 239.007 347.561 240.038  c
353.968 240.022 l
h
358.725 231.272 m
360.522 231.272 l
360.522 246.475 l
358.725 246.475 l
358.725 231.272 l
h
378.499 235.960 m
378.499 237.632 l
377.999 237.350 377.494 237.142 376.983 237.007  c
376.473 236.871 375.957 236.804 375.436 236.804  c
374.270 236.804 373.363 237.171 372.718 237.905  c
372.072 238.640 371.749 239.679 371.749 241.022  c
371.749 242.356 372.072 243.392 372.718 244.132  c
373.363 244.871 374.270 245.241 375.436 245.241  c
375.957 245.241 376.473 245.171 376.983 245.030  c
377.494 244.890 377.999 244.679 378.499 244.397  c
378.499 246.054 l
377.999 246.293 377.481 246.470 376.944 246.585  c
376.408 246.699 375.837 246.757 375.233 246.757  c
373.587 246.757 372.280 246.238 371.311 245.202  c
370.343 244.166 369.858 242.772 369.858 241.022  c
369.858 239.231 370.348 237.824 371.327 236.804  c
372.306 235.783 373.650 235.272 375.358 235.272  c
375.910 235.272 376.449 235.330 376.975 235.444  c
377.501 235.559 378.009 235.731 378.499 235.960  c
h
385.870 236.804 m
384.901 236.804 384.138 237.179 383.581 237.929  c
383.024 238.679 382.745 239.710 382.745 241.022  c
382.745 242.324 383.024 243.353 383.581 244.108  c
384.138 244.863 384.901 245.241 385.870 245.241  c
386.828 245.241 387.586 244.863 388.143 244.108  c
388.701 243.353 388.979 242.324 388.979 241.022  c
388.979 239.720 388.701 238.692 388.143 237.936  c
387.586 237.181 386.828 236.804 385.870 236.804  c
h
385.870 235.272 m
387.432 235.272 388.659 235.780 389.550 236.796  c
390.440 237.811 390.886 239.220 390.886 241.022  c
390.886 242.804 390.440 244.205 389.550 245.225  c
388.659 246.246 387.432 246.757 385.870 246.757  c
384.297 246.757 383.068 246.246 382.182 245.225  c
381.297 244.205 380.854 242.804 380.854 241.022  c
380.854 239.220 381.297 237.811 382.182 236.796  c
383.068 235.780 384.297 235.272 385.870 235.272  c
h
402.966 239.866 m
402.966 246.475 l
401.169 246.475 l
401.169 239.929 l
401.169 238.897 400.966 238.124 400.559 237.608  c
400.153 237.093 399.549 236.835 398.747 236.835  c
397.768 236.835 396.999 237.145 396.442 237.765  c
395.885 238.384 395.606 239.225 395.606 240.288  c
395.606 246.475 l
393.794 246.475 l
393.794 235.538 l
395.606 235.538 l
395.606 237.241 l
396.033 236.585 396.539 236.093 397.122 235.765  c
397.705 235.436 398.377 235.272 399.138 235.272  c
400.398 235.272 401.351 235.660 401.997 236.436  c
402.643 237.212 402.966 238.356 402.966 239.866  c
h
408.313 232.429 m
408.313 235.538 l
412.016 235.538 l
412.016 236.929 l
408.313 236.929 l
408.313 242.866 l
408.313 243.762 408.436 244.337 408.680 244.593  c
408.925 244.848 409.423 244.975 410.173 244.975  c
412.016 244.975 l
412.016 246.475 l
410.173 246.475 l
408.787 246.475 407.832 246.218 407.305 245.702  c
406.779 245.186 406.516 244.241 406.516 242.866  c
406.516 236.929 l
405.188 236.929 l
405.188 235.538 l
406.516 235.538 l
406.516 232.429 l
408.313 232.429 l
h
414.389 235.538 m
416.186 235.538 l
416.186 246.475 l
414.389 246.475 l
414.389 235.538 l
h
414.389 231.272 m
416.186 231.272 l
416.186 233.554 l
414.389 233.554 l
414.389 231.272 l
h
429.040 239.866 m
429.040 246.475 l
427.243 246.475 l
427.243 239.929 l
427.243 238.897 427.040 238.124 426.634 237.608  c
426.227 237.093 425.623 236.835 424.821 236.835  c
423.842 236.835 423.074 237.145 422.516 237.765  c
421.959 238.384 421.680 239.225 421.680 240.288  c
421.680 246.475 l
419.868 246.475 l
419.868 235.538 l
421.680 235.538 l
421.680 237.241 l
422.108 236.585 422.613 236.093 423.196 235.765  c
423.779 235.436 424.451 235.272 425.212 235.272  c
426.472 235.272 427.425 235.660 428.071 236.436  c
428.717 237.212 429.040 238.356 429.040 239.866  c
h
441.966 240.554 m
441.966 241.429 l
433.716 241.429 l
433.789 242.668 434.158 243.613 434.825 244.265  c
435.492 244.916 436.424 245.241 437.622 245.241  c
438.309 245.241 438.976 245.155 439.622 244.983  c
440.268 244.811 440.914 244.559 441.559 244.225  c
441.559 245.913 l
440.914 246.194 440.252 246.405 439.575 246.546  c
438.898 246.686 438.210 246.757 437.513 246.757  c
435.763 246.757 434.380 246.249 433.364 245.233  c
432.348 244.218 431.841 242.845 431.841 241.116  c
431.841 239.324 432.322 237.903 433.286 236.850  c
434.249 235.798 435.554 235.272 437.200 235.272  c
438.669 235.272 439.830 235.746 440.684 236.694  c
441.539 237.642 441.966 238.929 441.966 240.554  c
h
440.169 240.022 m
440.158 239.043 439.885 238.262 439.348 237.679  c
438.812 237.095 438.101 236.804 437.216 236.804  c
436.216 236.804 435.414 237.085 434.809 237.647  c
434.205 238.210 433.856 239.007 433.763 240.038  c
440.169 240.022 l
h
454.020 239.866 m
454.020 246.475 l
452.223 246.475 l
452.223 239.929 l
452.223 238.897 452.020 238.124 451.614 237.608  c
451.208 237.093 450.604 236.835 449.802 236.835  c
448.822 236.835 448.054 237.145 447.497 237.765  c
446.940 238.384 446.661 239.225 446.661 240.288  c
446.661 246.475 l
444.848 246.475 l
444.848 235.538 l
446.661 235.538 l
446.661 237.241 l
447.088 236.585 447.593 236.093 448.177 235.765  c
448.760 235.436 449.432 235.272 450.192 235.272  c
451.453 235.272 452.406 235.660 453.052 236.436  c
453.697 237.212 454.020 238.356 454.020 239.866  c
h
459.368 232.429 m
459.368 235.538 l
463.071 235.538 l
463.071 236.929 l
459.368 236.929 l
459.368 242.866 l
459.368 243.762 459.490 244.337 459.735 244.593  c
459.980 244.848 460.477 244.975 461.227 244.975  c
463.071 244.975 l
463.071 246.475 l
461.227 246.475 l
459.842 246.475 458.886 246.218 458.360 245.702  c
457.834 245.186 457.571 244.241 457.571 242.866  c
457.571 236.929 l
456.243 236.929 l
456.243 235.538 l
457.571 235.538 l
457.571 232.429 l
459.368 232.429 l
h
470.413 240.975 m
468.955 240.975 467.947 241.142 467.389 241.475  c
466.832 241.809 466.554 242.377 466.554 243.179  c
466.554 243.814 466.764 244.319 467.186 244.694  c
467.608 245.069 468.179 245.257 468.897 245.257  c
469.897 245.257 470.697 244.903 471.296 244.194  c
471.895 243.486 472.194 242.548 472.194 241.382  c
472.194 240.975 l
470.413 240.975 l
h
473.991 240.241 m
473.991 246.475 l
472.194 246.475 l
472.194 244.819 l
471.788 245.475 471.277 245.962 470.663 246.280  c
470.048 246.598 469.298 246.757 468.413 246.757  c
467.298 246.757 466.410 246.442 465.749 245.811  c
465.087 245.181 464.757 244.340 464.757 243.288  c
464.757 242.059 465.168 241.132 465.991 240.507  c
466.814 239.882 468.043 239.569 469.679 239.569  c
472.194 239.569 l
472.194 239.397 l
472.194 238.564 471.923 237.923 471.382 237.475  c
470.840 237.028 470.074 236.804 469.085 236.804  c
468.460 236.804 467.853 236.877 467.264 237.022  c
466.676 237.168 466.106 237.392 465.554 237.694  c
465.554 236.038 l
466.210 235.778 466.848 235.585 467.468 235.460  c
468.087 235.335 468.689 235.272 469.272 235.272  c
470.856 235.272 472.038 235.684 472.819 236.507  c
473.600 237.330 473.991 238.574 473.991 240.241  c
h
477.700 231.272 m
479.497 231.272 l
479.497 246.475 l
477.700 246.475 l
477.700 231.272 l
h
f
2 J
10.0000 M
Q
q
<< /PatternType 2
   /Shading
   << /ShadingType 2
      /ColorSpace /DeviceRGB
      /Coords [699.0836181640625 151.46922302246094 980.9163818359375 328.53076171875]
      /Function
      << /FunctionType 2
         /Domain [0 1]
         /Range [0 1 0 1 0 1]
         /C0 [0.9098039 0.93333334 0.96862745]
         /C1 [0.7176471 0.7882353 0.8901961]
         /N 1
      >>
      /Extend [true true]
   >>
>>
matrix makepattern setpattern
newpath
699.084 151.469 m
980.916 151.469 l
980.916 328.531 l
699.084 328.531 l
743.349 240.000 l
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
699.084 151.469 m
980.916 151.469 l
980.916 328.531 l
699.084 328.531 l
743.349 240.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
780.944 233.971 m
780.944 239.439 l
783.429 239.439 l
784.345 239.439 785.054 239.202 785.554 238.729  c
786.054 238.255 786.304 237.580 786.304 236.705  c
786.304 235.830 786.054 235.156 785.554 234.682  c
785.054 234.208 784.345 233.971 783.429 233.971  c
780.944 233.971 l
h
778.976 232.346 m
783.429 232.346 l
785.064 232.346 786.299 232.715 787.132 233.455  c
787.965 234.195 788.382 235.278 788.382 236.705  c
788.382 238.143 787.965 239.229 787.132 239.963  c
786.299 240.697 785.064 241.064 783.429 241.064  c
780.944 241.064 l
780.944 246.924 l
778.976 246.924 l
778.976 232.346 l
h
790.958 231.721 m
792.755 231.721 l
792.755 246.924 l
790.958 246.924 l
790.958 231.721 l
h
796.327 242.611 m
796.327 235.986 l
798.124 235.986 l
798.124 242.533 l
798.124 243.575 798.325 244.354 798.726 244.869  c
799.127 245.385 799.733 245.643 800.546 245.643  c
801.515 245.643 802.280 245.333 802.843 244.713  c
803.405 244.093 803.687 243.252 803.687 242.189  c
803.687 235.986 l
805.483 235.986 l
805.483 246.924 l
803.687 246.924 l
803.687 245.236 l
803.249 245.903 802.744 246.398 802.171 246.721  c
801.598 247.044 800.926 247.205 800.155 247.205  c
798.905 247.205 797.955 246.814 797.304 246.033  c
796.653 245.252 796.327 244.111 796.327 242.611  c
h
816.378 241.330 m
816.378 240.028 816.110 239.018 815.573 238.299  c
815.037 237.580 814.284 237.221 813.315 237.221  c
812.357 237.221 811.607 237.580 811.065 238.299  c
810.524 239.018 810.253 240.028 810.253 241.330  c
810.253 242.622 810.524 243.627 811.065 244.346  c
811.607 245.064 812.357 245.424 813.315 245.424  c
814.284 245.424 815.037 245.064 815.573 244.346  c
816.110 243.627 816.378 242.622 816.378 241.330  c
h
818.175 245.564 m
818.175 247.429 817.763 248.814 816.940 249.721  c
816.118 250.627 814.852 251.080 813.144 251.080  c
812.508 251.080 811.912 251.033 811.354 250.939  c
810.797 250.846 810.253 250.700 809.722 250.502  c
809.722 248.768 l
810.253 249.049 810.774 249.257 811.284 249.393  c
811.795 249.528 812.321 249.596 812.862 249.596  c
814.039 249.596 814.920 249.288 815.503 248.674  c
816.086 248.059 816.378 247.132 816.378 245.893  c
816.378 245.002 l
816.013 245.648 815.539 246.130 814.956 246.447  c
814.373 246.765 813.680 246.924 812.878 246.924  c
811.534 246.924 810.453 246.413 809.636 245.393  c
808.818 244.372 808.409 243.018 808.409 241.330  c
808.409 239.632 808.818 238.273 809.636 237.252  c
810.453 236.231 811.534 235.721 812.878 235.721  c
813.680 235.721 814.373 235.880 814.956 236.197  c
815.539 236.515 816.013 236.997 816.378 237.643  c
816.378 235.986 l
818.175 235.986 l
818.175 245.564 l
h
821.886 235.986 m
823.683 235.986 l
823.683 246.924 l
821.886 246.924 l
821.886 235.986 l
h
821.886 231.721 m
823.683 231.721 l
823.683 234.002 l
821.886 234.002 l
821.886 231.721 l
h
836.536 240.314 m
836.536 246.924 l
834.739 246.924 l
834.739 240.377 l
834.739 239.346 834.536 238.572 834.130 238.057  c
833.724 237.541 833.119 237.283 832.317 237.283  c
831.338 237.283 830.570 237.593 830.013 238.213  c
829.455 238.833 829.177 239.674 829.177 240.736  c
829.177 246.924 l
827.364 246.924 l
827.364 235.986 l
829.177 235.986 l
829.177 237.689 l
829.604 237.033 830.109 236.541 830.692 236.213  c
831.276 235.885 831.948 235.721 832.708 235.721  c
833.968 235.721 834.922 236.109 835.567 236.885  c
836.213 237.661 836.536 238.804 836.536 240.314  c
h
852.007 231.721 m
852.007 233.221 l
850.288 233.221 l
849.642 233.221 849.194 233.351 848.944 233.611  c
848.694 233.872 848.569 234.340 848.569 235.018  c
848.569 235.986 l
851.522 235.986 l
851.522 237.377 l
848.569 237.377 l
848.569 246.924 l
846.757 246.924 l
846.757 237.377 l
845.038 237.377 l
845.038 235.986 l
846.757 235.986 l
846.757 235.221 l
846.757 234.002 847.041 233.114 847.608 232.557  c
848.176 231.999 849.075 231.721 850.304 231.721  c
852.007 231.721 l
h
857.751 237.252 m
856.782 237.252 856.019 237.627 855.462 238.377  c
854.905 239.127 854.626 240.158 854.626 241.471  c
854.626 242.773 854.905 243.801 855.462 244.557  c
856.019 245.312 856.782 245.689 857.751 245.689  c
858.709 245.689 859.467 245.312 860.024 244.557  c
860.582 243.801 860.860 242.773 860.860 241.471  c
860.860 240.169 860.582 239.140 860.024 238.385  c
859.467 237.630 858.709 237.252 857.751 237.252  c
h
857.751 235.721 m
859.313 235.721 860.540 236.229 861.431 237.244  c
862.321 238.260 862.767 239.669 862.767 241.471  c
862.767 243.252 862.321 244.653 861.431 245.674  c
860.540 246.695 859.313 247.205 857.751 247.205  c
856.178 247.205 854.949 246.695 854.063 245.674  c
853.178 244.653 852.735 243.252 852.735 241.471  c
852.735 239.669 853.178 238.260 854.063 237.244  c
854.949 236.229 856.178 235.721 857.751 235.721  c
h
865.565 242.611 m
865.565 235.986 l
867.362 235.986 l
867.362 242.533 l
867.362 243.575 867.563 244.354 867.964 244.869  c
868.365 245.385 868.972 245.643 869.784 245.643  c
870.753 245.643 871.519 245.333 872.081 244.713  c
872.644 244.093 872.925 243.252 872.925 242.189  c
872.925 235.986 l
874.722 235.986 l
874.722 246.924 l
872.925 246.924 l
872.925 245.236 l
872.487 245.903 871.982 246.398 871.409 246.721  c
870.836 247.044 870.164 247.205 869.394 247.205  c
868.144 247.205 867.193 246.814 866.542 246.033  c
865.891 245.252 865.565 244.111 865.565 242.611  c
h
884.757 237.658 m
884.559 237.544 884.340 237.460 884.101 237.408  c
883.861 237.356 883.601 237.330 883.319 237.330  c
882.299 237.330 881.517 237.658 880.976 238.314  c
880.434 238.971 880.163 239.919 880.163 241.158  c
880.163 246.924 l
878.351 246.924 l
878.351 235.986 l
880.163 235.986 l
880.163 237.689 l
880.538 237.023 881.028 236.528 881.632 236.205  c
882.236 235.882 882.976 235.721 883.851 235.721  c
883.965 235.721 884.098 235.729 884.249 235.744  c
884.400 235.760 884.569 235.783 884.757 235.814  c
884.757 237.658 l
h
895.745 240.314 m
895.745 246.924 l
893.948 246.924 l
893.948 240.377 l
893.948 239.346 893.745 238.572 893.339 238.057  c
892.933 237.541 892.328 237.283 891.526 237.283  c
890.547 237.283 889.779 237.593 889.222 238.213  c
888.664 238.833 888.386 239.674 888.386 240.736  c
888.386 246.924 l
886.573 246.924 l
886.573 235.986 l
888.386 235.986 l
888.386 237.689 l
888.813 237.033 889.318 236.541 889.901 236.213  c
890.485 235.885 891.157 235.721 891.917 235.721  c
893.177 235.721 894.131 236.109 894.776 236.885  c
895.422 237.661 895.745 238.804 895.745 240.314  c
h
899.327 235.986 m
901.124 235.986 l
901.124 246.924 l
899.327 246.924 l
899.327 235.986 l
h
899.327 231.721 m
901.124 231.721 l
901.124 234.002 l
899.327 234.002 l
899.327 231.721 l
h
f
2 J
10.0000 M
Q
0 J
1.45000 M
newpath
527.515 213.152 m
721.938 213.152 l
S
newpath
729.938 213.152 m
717.938 208.152 l
720.938 213.152 l
717.938 218.152 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
511.919 181.940 m
706.291 181.940 l
S
newpath
714.291 181.940 m
702.291 176.940 l
705.291 181.940 l
702.291 186.940 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
517.536 301.940 m
712.363 301.940 l
S
newpath
509.536 301.940 m
521.536 306.940 l
518.536 301.940 l
521.536 296.940 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
728.254 270.152 m
533.453 270.152 l
S
newpath
525.453 270.152 m
537.453 275.152 l
534.453 270.152 l
537.453 265.152 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
698.344 165.940 m
503.938 165.940 l
S
newpath
706.344 165.940 m
694.344 160.940 l
697.344 165.940 l
694.344 170.940 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
743.366 240.000 m
548.521 240.000 l
S
newpath
540.521 240.000 m
552.521 245.000 l
549.521 240.000 l
552.521 235.000 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
