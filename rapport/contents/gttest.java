
package GT_AIRT_Air_tSensTEGRClrDsLowRes;

import com.continental.gt.test.GreenTTest;
import com.continental.gt.test.report.Severity;
import com.continental.gt.test.alias.readable.AliasHilChkParam;
import com.continental.gt.test.alias.readable.AliasReadableDbg;
import com.continental.gt.evaluable.numerical.variable.Variable;
import com.continental.gt.devices.Hil;
import com.continental.gt.evaluable.numerical.floats.FloatEvaluable;
import com.continental.gt.devices.Dbg;
import com.continental.gt.evaluable.numerical.floats.FloatValue;
import com.continental.gt.parser.a2l.dataDescription.Measurement;
import com.continental.gt.evaluable.bool.BoolEvaluable;
import com.continental.gt.evaluable.bool.operator.logic.And;
import com.continental.gt.evaluable.bool.operator.logic.NAryLogicOperator;
import com.continental.gt.evaluable.numerical.variable.Variable;
import com.continental.gt.test.analyzer.ExpectedBehavior;
import com.continental.gt.parser.a2l.dataDescription.types.DATA_TYPE;
import com.continental.gt.evaluable.bool.operator.BoolBinaryOperator;
import com.continental.gt.evaluable.bool.operator.comparator.Eq;

/**
 * Test of stubbed class generated
 * Generated by GreenT
 */
public class GreenTTest_AIRT_Air_tSensTEGRClrDsLowRes extends GreenTTest {
	
	public GreenTTest_AIRT_Air_tSensTEGRClrDsLowRes() {
		super("Anonymous GreenTTest_AIRT_Air_tSensTEGRClrDsLowRes");
	}

	public GreenTTest_AIRT_Air_tSensTEGRClrDsLowRes(String name) {
		super(name);
	}
	
	@Override
	public void createExpectedBehavior() {
		eb = new ExpectedBehavior();
		// Set root node
		eb.setRoot(ebTree());
		eb.setRecurrence(20);
	}
	
	@Override
	public void addAllRequiredContextualData() {
		addRecordedVariable(new AliasHilChkParam("HIL_KEY_OUT"));
		

		// Add recorded variable for a simple alias: Air_tSensTEGRClrDsLowRes;
		// Measurement for Air_tSensTEGRClrDsLowRes;
		Measurement mes_Air_tSensTEGRClrDsLowRes = new Measurement("Air_tSensTEGRClrDsLowRes", null);
		mes_Air_tSensTEGRClrDsLowRes.setDataType(DATA_TYPE.SWORD);
		mes_Air_tSensTEGRClrDsLowRes.setLowerLimit(-131112.0);
		mes_Air_tSensTEGRClrDsLowRes.setUpperLimit(131028.0);
		mes_Air_tSensTEGRClrDsLowRes.setUpperHexLimit(new Long(32767L));
		mes_Air_tSensTEGRClrDsLowRes.setLowerHexLimit(new Long(32768L));
		mes_Air_tSensTEGRClrDsLowRes.setSize(2);
		AliasReadableDbg Air_tSensTEGRClrDsLowRes = new AliasReadableDbg("Air_tSensTEGRClrDsLowRes");
		Air_tSensTEGRClrDsLowRes.setMeasurement(mes_Air_tSensTEGRClrDsLowRes);
		addRecordedVariable(Air_tSensTEGRClrDsLowRes);
	}

	@Override
	public void createReport() {
		report.setVariableLongName("Sensed value of EGR cooler down stream temperature with low resolution.");
		report.setVariableName("Air_tSensTEGRClrDsLowRes");
		report.setResponsible("G.Esteves");
		report.setSeverity(Severity.LOW);
		report.setTestSummary("Test if the interface Air_tSensTEGRClrDsLowRes is correctly stub to 980 Â°C");
		report.setAggregate("AIRT");
		report.setTestName("AIRT_Air_tSensTEGRClrDsLowRes");
		report.setLiteralExpectedBehavior("EVAL(Air_tSensTEGRClrDsLowRes=980)"+
"");
		report.addComment("");
		report.addComment("");
		report.addComment("");
	}

		
	/**
	  * EVAL(Air_tSensTEGRClrDsLowRes=980)

	  */
	private BoolEvaluable ebTree()  {
		
		// Root node
		NAryLogicOperator root = new And();
		
		// Air_tSensTEGRClrDsLowRes
		Variable varAir_tSensTEGRClrDsLowRes0 = new Variable("Air_tSensTEGRClrDsLowRes");
		
		// Measurement for varAir_tSensTEGRClrDsLowRes0
		Measurement mes_Air_tSensTEGRClrDsLowRes0 = new Measurement("Air_tSensTEGRClrDsLowRes", null);
		mes_Air_tSensTEGRClrDsLowRes0.setDataType(DATA_TYPE.SWORD);
		mes_Air_tSensTEGRClrDsLowRes0.setLowerLimit(-131112.0);
		mes_Air_tSensTEGRClrDsLowRes0.setUpperLimit(131028.0);
		mes_Air_tSensTEGRClrDsLowRes0.setUpperHexLimit(new Long(32767L));
		mes_Air_tSensTEGRClrDsLowRes0.setLowerHexLimit(new Long(32768L));
		mes_Air_tSensTEGRClrDsLowRes0.setSize(2);
		varAir_tSensTEGRClrDsLowRes0.setMeasurement(mes_Air_tSensTEGRClrDsLowRes0);
		
		//add new Variable from DBG : Air_tSensTEGRClrDsLowRes
		eb.addPrimaryVariable(varAir_tSensTEGRClrDsLowRes0);
		
		// 980
		FloatEvaluable value1 = new FloatValue(980);
		
		// Air_tSensTEGRClrDsLowRes=980
		BoolBinaryOperator eq2 = new Eq();
		eq2.setOperandes(varAir_tSensTEGRClrDsLowRes0, value1);
		root.addInput(eq2);
		
		return root;
	}
	

}
